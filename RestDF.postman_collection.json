{
	"info": {
		"_postman_id": "23dfd801-0dee-4365-8e98-ab5275568c44",
		"name": "RestDF",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "(/) Index route, gives brief into about the endpoints",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{BASE_URL}}/",
					"protocol": "http",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "(/stats) Provides basic Stats about the currently running API",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{BASE_URL}}/stats",
					"protocol": "http",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"stats"
					]
				}
			},
			"response": []
		},
		{
			"name": "(/columns) Get the dataframe columns",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{BASE_URL}}/columns",
					"protocol": "http",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"columns"
					]
				}
			},
			"response": []
		},
		{
			"name": "(/describe) Describes different properties of the dataframe",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"datetime_is_numeric\": false,\n  \"exclude\": [\n    \"O\"\n  ],\n  \"include\": [\n    \"int\"\n  ],\n  \"percentiles\": [\n    0.01,\n    0.25,\n    0.75,\n    0.99\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{BASE_URL}}/describe",
					"protocol": "http",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"describe"
					]
				}
			},
			"response": []
		},
		{
			"name": "(/dtypes) Returns the datatypes of all columns",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{BASE_URL}}/dtypes",
					"protocol": "http",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"dtypes"
					]
				}
			},
			"response": []
		},
		{
			"name": "(/info) Returns some dataframe into (Datatypes, Non-null counts etc)",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{BASE_URL}}/info",
					"protocol": "http",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"info"
					]
				}
			},
			"response": []
		},
		{
			"name": "(/nulls) Returns the datatypes of all columns",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{BASE_URL}}/nulls",
					"protocol": "http",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"nulls"
					]
				}
			},
			"response": []
		},
		{
			"name": "(/value_counts/{column_name}) Returns the value_count result of a column",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{BASE_URL}}/value_counts/{{CATEGORICAL_COLUMN}}",
					"protocol": "http",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"value_counts",
						"{{CATEGORICAL_COLUMN}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(/equals/{column_name}) Returns rows where all column values are exactly equal to given value",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"as_string\": false,\n  \"columns\": [],\n  \"index\": true,\n  \"value\": \"female\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{BASE_URL}}/equals/{{CATEGORICAL_COLUMN}}",
					"protocol": "http",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"equals",
						"{{CATEGORICAL_COLUMN}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(/find_string/{column_name}) /find_string/{column_name}",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"case\": false,\n  \"columns\": [],\n  \"flags\": 0,\n  \"index\": true,\n  \"na\": true,\n  \"pattern\": \"miss.\",\n  \"regex\": false\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{BASE_URL}}/find_string/{{STRING_COLUMN}}",
					"protocol": "http",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"find_string",
						"{{STRING_COLUMN}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(/head) Returns the head of the dataframe",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"columns\": null,\n  \"index\": true,\n  \"n\": 5\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{BASE_URL}}/head",
					"protocol": "http",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"head"
					]
				}
			},
			"response": []
		},
		{
			"name": "(/isin/{column_name}) Returns rows where all column values are within the array content",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"as_string\": false,\n  \"columns\": null,\n  \"index\": true,\n  \"values\": [1,2]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{BASE_URL}}/isin/{{NUMERICAL_COLUMN}}",
					"protocol": "http",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"isin",
						"{{NUMERICAL_COLUMN}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(/not_equals/{column_name}) Returns rows where all column values are not equal to given value.",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"as_string\": false,\n  \"columns\": [\"Pclass\", \"Name\", \"Embarked\"],\n  \"index\": true,\n  \"value\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{BASE_URL}}/not_equals/{{NUMERICAL_COLUMN}}",
					"protocol": "http",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"not_equals",
						"{{NUMERICAL_COLUMN}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(/notin/{column_name}) Returns rows where all column values are not within the array content",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"as_string\": true,\n  \"columns\": [\"Pclass\"],\n  \"index\": false,\n  \"values\": [\"1\", \"2\"]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{BASE_URL}}/notin/{{NUMERICAL_COLUMN}}",
					"protocol": "http",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"notin",
						"{{NUMERICAL_COLUMN}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(/sample) Returns random rows from the dataframe",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"columns\": null,\n  \"frac\": null,\n  \"index\": true,\n  \"n\": 1,\n  \"random_state\": 0,\n  \"replace\": false,\n  \"weights\": null\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{BASE_URL}}/sample",
					"protocol": "http",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"sample"
					]
				}
			},
			"response": []
		},
		{
			"name": "(/values/{column_name}) Returns values for a particular column",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"add_index\": true,\n  \"n\": 10\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{BASE_URL}}/values/{{STRING_COLUMN}}",
					"protocol": "http",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"values",
						"{{STRING_COLUMN}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BASE_URL",
			"value": "localhost:8000"
		},
		{
			"key": "CATEGORICAL_COLUMN",
			"value": "Sex"
		},
		{
			"key": "STRING_COLUMN",
			"value": "Name"
		},
		{
			"key": "NUMERICAL_COLUMN",
			"value": "Pclass"
		}
	]
}